plugins {
	id "architectury-plugin" version "3.1-SNAPSHOT"
	id "dev.architectury.loom" version "0.7.2-SNAPSHOT" apply false
}

architectury {
	minecraft = rootProject.minecraft_version
}

subprojects {
	apply plugin: "dev.architectury.loom"

	dependencies {
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	}
}

allprojects {
	apply plugin: "java"
	apply plugin: "architectury-plugin"
	apply plugin: "maven-publish"

	repositories {
		mavenCentral()
		maven { url "https://maven.shedaniel.me/" }
		maven {
			name = "AperLambda"
			url = 'https://aperlambda.github.io/maven'
		}


		/*maven { url 'https://jitpack.io' }

        maven {
            name = "entity reach"
            url = "https://maven.jamieswhiteshirt.com/libs-release/"
        }
        maven {
            name = "fall flying lib"
            url = "https://dl.bintray.com/adriantodt/maven"
        }
        maven {
            name = "cloth config"
            url = "https://maven.shedaniel.me/"
        }*/

		maven {
			name = 'TerraformersMC'
			url = 'https://maven.terraformersmc.com/releases/'
		}
	}

	tasks.withType(JavaCompile).configureEach {
		// ensure that the encoding is set to UTF-8, no matter what the system default is
		// this fixes some edge cases with special characters not displaying correctly
		// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
		// If Javadoc is generated, this must be specified in that task too.
		it.options.encoding = "UTF-8"

		// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
		// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
		// We'll use that if it's available, but otherwise we'll use the older option.
		def targetVersion = 8
		if (JavaVersion.current().isJava9Compatible()) {
			it.options.release = targetVersion
		}
	}

	archivesBaseName = rootProject.archives_base_name
	version = rootProject.mod_version
	group = rootProject.maven_group

	java {
		withSourcesJar()
	}

	jar {
		from("LICENSE") {
			rename { "${it}_${project.archivesBaseName}"}
		}
	}
}
